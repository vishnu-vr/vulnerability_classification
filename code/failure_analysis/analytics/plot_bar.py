# code to plot bar graph for CLEAN - DEEP

import pandas as pd
import os
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import sys
import json

def saveAsJson(data,filename):
    filename += ".json"
    with open(filename, 'w') as f:
        json.dump(data, f) 

'''vertical bar'''
def plot_bar(model_names,percentages):
	# url for original code
	# https://matplotlib.org/3.2.1/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py
	
	# model_names = ['G1', 'G2', 'G3', 'G4', 'G5']
	# men_means = [20, 34, 30, 35, 27]
	# percentages = [25, 32, 34, 20, 25]

	x = np.arange(len(model_names))  # the label locations
	# width = 0.35  # the width of the bars

	fig, ax = plt.subplots()
	# rects1 = ax.bar(x - width/2, men_means, width, label='Men')
	rects2 = ax.bar(x, percentages)

	# Add some text for model_names, title and custom x-axis tick model_names, etc.
	ax.set_ylabel("% of intersection")
	ax.set_title('Dataset II')
	ax.set_xticks(x)
	ax.set_xticklabels(model_names)
	# ax.legend()


	def autolabel(rects):
	    """Attach a text label above each bar in *rects*, displaying its height."""
	    for rect in rects:
	        height = rect.get_height()
	        ax.annotate('{}'.format(height),
	                    xy=(rect.get_x() + rect.get_width() / 2, height),
	                    xytext=(0, 3),  # 3 points vertical offset
	                    textcoords="offset points",
	                    ha='center', va='bottom')


	# autolabel(rects1)
	autolabel(rects2)

	fig.tight_layout()

	# path for saving both names and plot
	save_path = folder_path.split('/')
	save_path = '/'.join(save_path[:-1])

	plt.show()
	# plt.save()
	# plt.savefig(save_path+"/intersection.png")


'''horizontal bar'''
def plot_barh(model_names,percentages):
	# url for original code
	# https://matplotlib.org/3.2.1/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py
	
	# model_names = ['G1', 'G2', 'G3', 'G4', 'G5']
	# men_means = [20, 34, 30, 35, 27]
	# percentages = [25, 32, 34, 20, 25]

	x = np.arange(len(model_names))  # the label locations
	# width = 0.35  # the width of the bars

	fig, ax = plt.subplots()
	# rects1 = ax.barh(x, [25, 32, 34, 20, 25, 20, 20, 20, 20, 20, 20, 20, 20])
	rects2 = ax.barh(x, percentages)

	# Add some text for model_names, title and custom x-axis tick model_names, etc.
	ax.set_xlabel("% of intersection")
	# ax.set_title('Dataset II')
	ax.set_ylabel("Deep Classifiers")
	ax.set_yticks(x)
	ax.set_yticklabels(model_names)
	# ax.legend()


	def autolabel(rects):
	    """Attach a text label above each bar in *rects*, displaying its height."""
	    for rect in rects:
	        height = rect.get_height()
	        ax.annotate('{}'.format(height),
	                    xy=(rect.get_x() + rect.get_width() / 2, height),
	                    xytext=(0, 3),  # 3 points vertical offset
	                    textcoords="offset points",
	                    ha='center', va='bottom')


	# autolabel(rects1)
	# autolabel(rects2)
	for i, v in enumerate(percentages):
		ax.text(v + 0, i - 0.125, str(v)+'')

	fig.tight_layout()

	# path for saving both names and plot
	save_path = folder_path.split('/')
	save_path = '/'.join(save_path[:-1])

	plt.show()
	# plt.savefig(save_path+"/intersection.png")

def plot(best_mis_info,list_of_model,model_names):
	'''
	best_mis_info : misclassification details of best model (dataframe)
	list_of_model : rest of the models to be compared with (list of df)
	model_names   : names of the models in order of list_of_model (list of string)
	'''
	# location for saving the plot
	global folder_path
	print(model_names)
	# sys.exit(0)
	# misclassified count of samples of best model
	mis_count_best = len(best_mis_info)

	# percentage of intersection with the best model
	# ie number of misclassified samples by both best and model
	# to be compared divided by number of samples misclassified
	# by the best model
	percent_intersection_with_best = [round((len(df)/mis_count_best)*100) for df in list_of_model]
	print(percent_intersection_with_best)

	# path for saving both names and plot
	save_path = folder_path.split('/')
	save_path = '/'.join(save_path[:-1])

	# saving model names in order
	saveAsJson(model_names,save_path+"/model_names")

	# C1,C2... for classifier names
	model_names = ['C'+str(num+1) for num in range(len(model_names))]

	# plotting bar graph and saving
	plot_barh(model_names,percent_intersection_with_best)

	# # Make a fake dataset:
	# height = percent_intersection_with_best
	# bars = model_names
	# y_pos = np.arange(len(bars))
	 
	# # Create bars
	# plt.bar(y_pos, height)

	# # plt.legend()

	# # Create names on the x-axis
	# plt.xticks(y_pos, bars)

	# plt.text
	 
	# # Show graphic
	# plt.show()

	# sys.exit(0)

	# # saving
	# plt.savefig(save_path+'/intersection.pdf')


	# fig = plt.figure()
	# ax = fig.add_axes([0,0,1,1])
	# ax.bar(model_names,percent_intersection_with_best)
	# plt.show()
	# # plt.savefig('/Users/vishnu/Desktop/test.pdf')


# driver code

best_mis_info = "/Users/vishnu/Desktop/project/new_3/failure_analysis/clean/deep/stackingDNN_clean_best.csv"
best_mis_info = pd.read_csv(best_mis_info)

folder_path = "/Users/vishnu/Desktop/project/new_3/failure_analysis/clean/deep/intersection_with_best"
files = os.listdir(folder_path)

model_names=[]
list_of_model=[]
for path in files:
	# skipping unneccessory files
	if path.split('.')[-1] != 'csv':
		continue
	print(path)
	# print(folder_path+'/'+path)
	try:
		name = path.split('.')[0]
		df = pd.read_csv(folder_path+'/'+path)
		list_of_model.append(df)
		model_names.append(name)
	except:
		print("something went wrong!")

# print()
# print()
# print(*model_names,sep='\n')

# sub_names = []

# driver code
plot(best_mis_info,list_of_model,model_names)

